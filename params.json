{"name":"Treehuggerdocs","tagline":"The documentation website source for tree-hugger","body":"---\r\ntitle: Treehugger Docs\r\n\r\n---\r\n\r\n## Welcome to GitHub Pages\r\n\r\nYou can use the [editor on GitHub](https://github.com/autosoft-dev/treehuggerdocs/edit/master/README.md) to maintain and preview the content for your website in Markdown files.\r\n\r\nWhenever you commit to this repository, GitHub Pages will run [Jekyll](https://jekyllrb.com/) to rebuild the pages in your site, from the content in your Markdown files.\r\n\r\n\r\n## Browse the documentation\r\n\r\n\r\n### Installation and setup\r\n\r\n### From pip:\r\n\r\nJust do\r\n```\r\npip install tree-hugger\r\n```\r\n\r\n### From Source:\r\n\r\n```\r\ngit clone https://github.com/autosoft-dev/tree-hugger.git\r\n\r\ncd tree-hugger\r\n\r\npip install -e .\r\n```\r\n\r\n_The installation process is tested in macOS Mojave, we have a [separate docker binding](https://github.com/autosoft-dev/tree-sitter-docker) for compiling the libraries for Linux and soon this library will be integrated in that as well_\r\n\r\n_You may need to install libgit2. In case you are in mac just use `brew install libgit2`_\r\n\r\n## Building the .so files\r\n\r\n_Please note that building the libraries has been tested under a macOS Mojave with Apple LLVM version 10.0.1 (clang-1001.0.46.4)_\r\n\r\n_Please check out our Linux specific instructions [here](https://github.com/autosoft-dev/tree-sitter-docker)_\r\n\r\nOnce this library is installed it gives you a command line utility to download and compile tree-sitter .so files with ease. As an example - \r\n\r\n```\r\ncreate_libs python\r\n```\r\n\r\nHere is the full usage guide of the command\r\n\r\n```\r\nusage: create_libs [-h] [-c] [-l LIB_NAME] langs [langs ...]\r\n\r\npositional arguments:\r\n  langs                 Give the name of languages for tree-sitter (php,\r\n                        python, go ...)\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -c, --copy-to-workspace\r\n                        Shall we copy the created libs to the present dir?\r\n                        (default: False)\r\n  -l LIB_NAME, --lib-name LIB_NAME\r\n                        The name of the generated .so file\r\n```\r\n\r\n\r\n### Supported languages\r\n\r\n\r\n### Tutorials\r\n\r\n## A Quick Example\r\n\r\nFirst run the above command to generate the libraries. \r\n\r\nIn our settings we just use the `-c` flag to copy the generated `tree-sitter` library's `.so` file to our workspace.\r\nAnd once copied, we place it under a directory called `tslibs` (It is in the .gitignore). But of course, if you are using linux then this command probably won't work and you will need to use our [tree-sitter-docker](https://github.com/autosoft-dev/tree-sitter-docker) image and manually copy the final .so file.\r\n\r\nAnother thing that we need before we can analyze any code file is an yaml with queries. We have suuplied one example query file\r\nunder [**queries**](https://raw.githubusercontent.com/autosoft-dev/tree-hugger/master/queries/example_queries.yml) directory. \r\n\r\n*Please note that, you can set up two environment variables `QUERY_FILE_PATH` and `TS_LIB_PATH` for the query file path and \r\ntree-sitter lib path and then the libary will use them automatically. Otherwise, as an alternative, you can pass it when creating any `*Parser` object*\r\n\r\nAssuming that you have the necessary environment variable setup. The following line of code will create a `PythonParser` object\r\n\r\n```python\r\nfrom tree_hugger.core import PythonParser\r\n\r\npp = PythonParser()\r\n```\r\n\r\nAnd then you can pass in any Python file that you want to analyze, like so :\r\n\r\n```python\r\npp.parse_file(\"tests/assets/file_with_different_functions.py\")\r\nOut[3]: True\r\n```\r\n\r\n`parse_file` returns `True` if success\r\n\r\nAnd then you are free to use the methods exposed by that particular Parser object. As an example - \r\n\r\n```python\r\npp.get_all_function_names()\r\nOut[4]:\r\n['first_child',\r\n 'second_child',\r\n 'say_whee',\r\n 'wrapper',\r\n 'my_decorator',\r\n 'parent']\r\n```\r\n\r\nOR\r\n\r\n```python\r\npp.get_all_function_documentations()\r\nOut[5]:\r\n{'parent': '\"\"\"This is the parent function\\n    \\n    There are other lines in the doc string\\n    This is the third line\\n\\n    And this is the fourth\\n    \"\"\"',\r\n 'first_child': \"'''\\n        This is first child\\n        '''\",\r\n 'second_child': '\"\"\"\\n        This is second child\\n        \"\"\"',\r\n 'my_decorator': '\"\"\"\\n    Outer decorator function\\n    \"\"\"',\r\n 'say_whee': '\"\"\"\\n    Hellooooooooo\\n\\n    This is a function with decorators\\n    \"\"\"'}\r\n```\r\n\r\n### API reference\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}